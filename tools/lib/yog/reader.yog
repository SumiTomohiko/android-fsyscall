
from datatypes import JsonArray

def to_upper_camel_single(s)
  t = s.to_upper_camel_case()
  return t[-1] == "s" ? t.slice(0, t.size - 1) : t
end

def build_prototypes(g, struct)
  a = []
  struct.members.each() do |name, datatype|
    if datatype.kind_of?(JsonArray)
      s = to_upper_camel_single(name)
      a << "public void onBegin{0}();".format(s)
      a << "public void onEnd{0}();".format(s)
      next
    end
    fmt = "public void onRead{0}({1} {2});"
    a << fmt.format(name.to_upper_camel_case(), datatype.java_type, name.to_lower_camel_case())
  end
  return a
end

def build_handler(g, struct)
  methods = build_prototypes(g, struct).join("\n" + 2 * g.indent)
  return <<EOF.format(struct.name.to_upper_camel_case(), methods)
    public interface {0}Handler {{

        {1}
    }}
EOF
end

def build_handlers(g)
  handlers = g.structs.map(&build_handler.partial(g))
  return handlers.map(&call_method('trim)).join("\n\n" + g.indent)
end

def build_handlers_members(g)
  a = g.structs.map() do |struct|
    fmt = "public {0}Handler {1}Handler;"
    name = struct.name
    next fmt.format(name.to_upper_camel_case(), name.to_lower_camel_case())
  end
  return a.join("\n" + 2 * g.indent)
end

def build_methods(g)
  a = []
  g.structs.each() do |struct|
    name = struct.name
    members = []
    struct.members.each() do |member, datatype|
      if datatype.kind_of?(JsonArray)
        members << <<EOF.format(member, name.to_lower_camel_case(), to_upper_camel_single(member), datatype.datatype.name.to_upper_camel_case())
            if (name.equals("{0}")) {{
                reader.beginArray();
                while (reader.hasNext()) {{
                    mHandlers.{1}Handler.onBegin{2}();
                    read{3}(reader);
                    mHandlers.{1}Handler.onEnd{2}();
                }}
                reader.endArray();
                continue;
            }}
EOF
        next
      end
      members << <<EOF.format(member, name.to_lower_camel_case(), member.to_upper_camel_case(), datatype.java_type.to_upper_camel_case())
            if (name.equals("{0}")) {{
                mHandlers.{1}Handler.onRead{2}(reader.next{3}());
                continue;
            }}
EOF
    end

    a << <<EOF.format(name.to_upper_camel_case(), members.map(&call_method('trim)).join("\n" + 3 * g.indent))
    private void read{0}(JsonReader reader) throws IOException {{
        reader.beginObject();
        while (reader.hasNext()) {{
            String name = reader.nextName();
            {1}
        }}
        reader.endObject();
    }}
EOF
  end
  return a.map(&call_method('trim)).join("\n\n" + g.indent)
end

def generate_reader(g, dest)
  File.open(dest, "w") do |fp|
    handlers = build_handlers(g)
    members = build_handlers_members(g)
    methods = build_methods(g)
    fp.write(<<EOF.format(g.package, handlers, members, methods))
package {0};

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;

import android.util.JsonReader;

public class PresetReader {{

    {1}

    public static class Handlers {{

        {2}
    }}

    private Handlers mHandlers;

    public PresetReader(Handlers handlers) {{
        mHandlers = handlers;
    }}

    public void read(String path) throws IOException {{
        read(new BufferedReader(new FileReader(path)));
    }}

    public void read(Reader in) throws IOException {{
        readMain(new JsonReader(in));
    }}

    {3}
}}

// vim: tabstop=4 shiftwidth=4 expandtab softtabstop=4
EOF
  end
end

# vim: tabstop=2 shiftwidth=2 expandtab softtabstop=2
